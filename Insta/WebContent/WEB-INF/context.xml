<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!--접두어 접미어  뷰핸들러 설정  -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:prefix="/"
		p:suffix=".jsp"
	/>
	<!-- 파일 업로드 핸들러 설정 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	<!-- 컴포넌트 메모리 올리기 -->
	<context:component-scan base-package="com.alsta"/>
	<!-- jndi 읽어 오기 -->
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/oracle" resource-ref="true"/>
	<!-- mybatis 설정 sqlsessionfactory 메모리 올리기 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:com/alsta/mybatis/config.xml"
	/>
	<!-- sqlsessionfactory에서 session얻어오기 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	<!-- AOP log4j를 이용하여 로그 남기기 -->
	<bean id="myLogger" class="com.alsta.common.log.MyLogger"/>
	<aop:config>
		<aop:aspect id="LoggerAspect" ref="myLogger">
		<aop:pointcut 
		expression="execution(public * com.alsta..*..*(..))" 
		id="controllerCut"/>
		<aop:around method="printMsg" pointcut-ref="controllerCut"/>
		</aop:aspect>
	</aop:config>
	<!-- 트랜잭션 매니저 등록 
		개발자가 사용하는 것이 jdbc,mybatis:dataSourceTransactionManager
		hibernate :HibernateTransactionManager
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	p:dataSource-ref="dataSource"/>
	<!-- 트랜잭션 처리를 건바이 건으로 처리하고자 할때 주로 트랜잭션은 서비스에 @Transactional로 건다. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- aop를 이용하여 어플리케이션 전체에 걸 수 있따. -->
	<tx:advice id="myTx" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="reply" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- aop transaction -->
	<aop:config>
	<!-- advice가 적용될 지점 서술 -->
		<aop:pointcut expression="execution(public * com.sds.model..*ServiceImpl.*(..))" id="serviceCut"/>
		<aop:advisor advice-ref="myTx" pointcut-ref="serviceCut"/>
	</aop:config>
</beans>
